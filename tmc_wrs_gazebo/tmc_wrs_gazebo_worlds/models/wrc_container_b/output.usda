#usda 1.0

def Xform "wrc_container_b"
{
    float3 xformOp:rotateXYZ = (0, -0, 0)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

    def Xform "link"
    {
        float3 xformOp:rotateXYZ = (0, -0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

        def Xform "bottom_v"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0.002)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/Material_0>
                double size = 1
                float3 xformOp:scale = (0.18, 0.26, 0.004)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "front_v"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0.13, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/Material_1>
                double size = 1
                float3 xformOp:scale = (0.18, 0.004, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "back_v"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, -0.13, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/Material_2>
                double size = 1
                float3 xformOp:scale = (0.18, 0.004, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "left_v"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0.09, 0, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/Material_3>
                double size = 1
                float3 xformOp:scale = (0.004, 0.26, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "right_v"
        {
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (-0.09, 0, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry"
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/Material_4>
                double size = 1
                float3 xformOp:scale = (0.004, 0.26, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "bottom"
        {
            uniform token purpose = "guide"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0, 0.002)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/MaterialPhysics_0>
                double size = 1
                float3 xformOp:scale = (0.18, 0.26, 0.004)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "front"
        {
            uniform token purpose = "guide"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, 0.13, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/MaterialPhysics_1>
                double size = 1
                float3 xformOp:scale = (0.18, 0.004, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "back"
        {
            uniform token purpose = "guide"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0, -0.13, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/MaterialPhysics_2>
                double size = 1
                float3 xformOp:scale = (0.18, 0.004, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "left"
        {
            uniform token purpose = "guide"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (0.09, 0, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/MaterialPhysics_3>
                double size = 1
                float3 xformOp:scale = (0.004, 0.26, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }

        def Xform "right"
        {
            uniform token purpose = "guide"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            double3 xformOp:translate = (-0.09, 0, 0.055)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]

            def Cube "geometry" (
                prepend apiSchemas = ["PhysicsCollisionAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                rel material:binding = </wrc_container_b/Looks/MaterialPhysics_4>
                double size = 1
                float3 xformOp:scale = (0.004, 0.26, 0.11)
                uniform token[] xformOpOrder = ["xformOp:scale"]
            }
        }
    }

    def Scope "Looks"
    {
        def Material "Material_0"
        {
            token outputs:mdl:displacement.connect = </wrc_container_b/Looks/Material_0/Shader.outputs:out>
            token outputs:mdl:surface.connect = </wrc_container_b/Looks/Material_0/Shader.outputs:out>
            token outputs:mdl:volume.connect = </wrc_container_b/Looks/Material_0/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                )
                color3f inputs:emissive_color = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        int default = 40
                        dictionary range = {
                            int max = 100000
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emissive"
                    doc = "Enables the emission of light from the material"
                )
                token outputs:out
            }
        }

        def Material "Material_1"
        {
            token outputs:mdl:displacement.connect = </wrc_container_b/Looks/Material_1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </wrc_container_b/Looks/Material_1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </wrc_container_b/Looks/Material_1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                )
                color3f inputs:emissive_color = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        int default = 40
                        dictionary range = {
                            int max = 100000
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emissive"
                    doc = "Enables the emission of light from the material"
                )
                token outputs:out
            }
        }

        def Material "Material_2"
        {
            token outputs:mdl:displacement.connect = </wrc_container_b/Looks/Material_2/Shader.outputs:out>
            token outputs:mdl:surface.connect = </wrc_container_b/Looks/Material_2/Shader.outputs:out>
            token outputs:mdl:volume.connect = </wrc_container_b/Looks/Material_2/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                )
                color3f inputs:emissive_color = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        int default = 40
                        dictionary range = {
                            int max = 100000
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emissive"
                    doc = "Enables the emission of light from the material"
                )
                token outputs:out
            }
        }

        def Material "Material_3"
        {
            token outputs:mdl:displacement.connect = </wrc_container_b/Looks/Material_3/Shader.outputs:out>
            token outputs:mdl:surface.connect = </wrc_container_b/Looks/Material_3/Shader.outputs:out>
            token outputs:mdl:volume.connect = </wrc_container_b/Looks/Material_3/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                )
                color3f inputs:emissive_color = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        int default = 40
                        dictionary range = {
                            int max = 100000
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emissive"
                    doc = "Enables the emission of light from the material"
                )
                token outputs:out
            }
        }

        def Material "Material_4"
        {
            token outputs:mdl:displacement.connect = </wrc_container_b/Looks/Material_4/Shader.outputs:out>
            token outputs:mdl:surface.connect = </wrc_container_b/Looks/Material_4/Shader.outputs:out>
            token outputs:mdl:volume.connect = </wrc_container_b/Looks/Material_4/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                )
                color3f inputs:emissive_color = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (100000, 100000, 100000)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                )
                float inputs:emissive_intensity = 1 (
                    customData = {
                        int default = 40
                        dictionary range = {
                            int max = 100000
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emissive"
                    doc = "Enables the emission of light from the material"
                )
                token outputs:out
            }
        }

        def Material "MaterialPhysics_0" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:density = 1
            float physics:dynamicFriction = 1
            float physics:restitution = 1
            float physics:staticFriction = 1
            token physXMaterial:frictionCombineMode = "average"
            token physXMaterial:restitutionCombineMode = "average"
        }

        def Material "MaterialPhysics_1" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:density = 1
            float physics:dynamicFriction = 1
            float physics:restitution = 1
            float physics:staticFriction = 1
            token physXMaterial:frictionCombineMode = "average"
            token physXMaterial:restitutionCombineMode = "average"
        }

        def Material "MaterialPhysics_2" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:density = 1
            float physics:dynamicFriction = 1
            float physics:restitution = 1
            float physics:staticFriction = 1
            token physXMaterial:frictionCombineMode = "average"
            token physXMaterial:restitutionCombineMode = "average"
        }

        def Material "MaterialPhysics_3" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:density = 1
            float physics:dynamicFriction = 1
            float physics:restitution = 1
            float physics:staticFriction = 1
            token physXMaterial:frictionCombineMode = "average"
            token physXMaterial:restitutionCombineMode = "average"
        }

        def Material "MaterialPhysics_4" (
            apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:density = 1
            float physics:dynamicFriction = 1
            float physics:restitution = 1
            float physics:staticFriction = 1
            token physXMaterial:frictionCombineMode = "average"
            token physXMaterial:restitutionCombineMode = "average"
        }
    }
}

